function numIslands(grid: string[][]): number {
  let count = 0;

  //   go over each tile, flip all lands to water for each island tile
  for (let i = 0; i < grid.length; i++) {
    for (let j = 0; j < grid[i].length; j++) {
      if (grid[i][j] === "1") {
        count += 1;
        const tile = [i, j];
        const queue = [tile];

        const dimensions = [
          [-1, 0],
          [0, -1],
          [1, 0],
          [0, 1],
        ];

        while (queue.length > 0) {
          const curr = queue.shift() as number[];
          for (const side of dimensions) {
            const item = [curr[0] + side[0], curr[1] + side[1]];
            if (
              item[0] !== -1 &&
              item[1] !== -1 &&
              item[0] < grid.length &&
              item[1] < grid[0].length &&
              grid[item[0]][item[1]] === "1"
            ) {
              queue.push([item[0], item[1]]);
              grid[item[0]][item[1]] = "0";
            }
          }
        }
      }
    }
  }

  return count;
}

// const result = numIslands([
//   ["1", "1", "1", "1", "0"],
//   ["1", "1", "0", "1", "0"],
//   ["1", "1", "0", "0", "0"],
//   ["0", "0", "0", "0", "0"],
// ]);
// const result = numIslands([
//   ["1", "1", "0", "0", "0"],
//   ["1", "1", "0", "0", "0"],
//   ["0", "0", "1", "0", "0"],
//   ["0", "0", "0", "1", "1"],
// ]);
const result = numIslands([
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "0",
    "1",
    "1",
  ],
  [
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
  ],
  [
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "0",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
  ],
  [
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "0",
    "1",
    "1",
    "1",
    "1",
    "0",
    "0",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
  [
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
    "1",
  ],
]);

console.log(result);
